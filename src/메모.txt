[ 자바 클래스 파일 생성 ]
    1. [src]폴더 오른쪽 클릭
    2. [새로만들기] -> [패키지] -> ( 강의기준 day01~)
    3. [특정폴더] 오른쪽 클릭 -> [새로만들기] -> {java클래스]
    * 클래스 파일 명은 첫글자를 무조건 대문자 시작

[ 자바 구동 원리 ]
    1.개발자는 .java 파일 내 자바 문법 작성
    -Example.java(파일)
    2.[실행].java 파일 -- 컴파일(번역/해석) --> .class 파일 생성
    3.[처리] (컴퓨터가) class 자동 생성

    (자바 언어/ .java)

[ 주석 ]
    // 한 줄 주석
    /**/ 여러 줄 주석

[ 자바 활용처 ]
    1. 소프트웨어 : javafx툴 활용, 등등
    2. 웹 : JSP, Spring emdemd
    3. 앱 : 안드로이드 등등


[ 자바 코드 실행 ]
    자바는 클래스 단위로 컴파일 되고, 컴파일된 코드는 main 함수부터 자동 실행된다.

[ 리터럴 ]
    - 3, 3.14 , 'a' , "ABC" , true
    1. 정의 : 키보드로부터 입력한 자료
    2. 종류
        정수(int) , 실수(double) , 문자('') , 문자열("") , 논리(boolean)

[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리
    3. 종류( 8가지 )
        (1) 정수
        - byte : 1바이트 , -128 ~ +127
        - short : 2바이트 , +-3만 정도까지
        - int : 4바이트 ,  +- 21억 정도까지(*리터럴정수)
        - long : 8바이트 , +- 21억 정도 이상, 리터럴정수 뒤에 L/l 붙이기

        (2) 실수
        - float : 4바이트 , 소수점 8자리까지 표현, 리터럴실수 뒤에 F/f 붙이기
        - double : 8바이트 , 소수점 17자리까지 표현(*리터럴실수)

        (3) 논리
        - boolean : 1바이트 , true and false

        (4) 문자
        - char : 2바이트 , 유니코드,''작은따옴표 감싼 문자 1개

        (5) 문자열
        - String : 클래스 기반, ""큰따옴표 감싼 문자 여러 개


[ 출력함수 ]
    1.System.out.print();       출력
    2.System.out.printIn();     출력 후 줄바꿈
    3.System.out.printf( "형식문자1 형식문자2" , 값1 , 값2 );     서식(형식) 맞춤 출력
        - 형식문자 : %s문자열 , %d정수 , %c문자 . %f실수
        - 자릿수 :  %자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 공백, 오른쪽 정렬
                  %-자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 공백, 왼쪽 정렬
                  %0자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 0 채움
        - 소수점 자릿수 : %전체자릿수.소수점자릿수f : (소수점포함) 전체 자릿수만틈 자릿수 차지

[ 이스케이프/제어 문자] : 특수 문자에 기능이 포함
    \n 줄바꿈 \t 들여쓰기 \\ 백슬래시 출력 \' 작은따옴표 출력 \" 큰따옴표 출력


[ (변수)타입변환 ] , **다형성** API ( interface)
    1. 자료(묵시적)타입변환
        (1) byte -> short/char -> int -> long -> float -> double
        (2) 메모리 크기가 작은 것에서 큰 것으로 변환 가능!
        (3) 연산결과
            - 두 항 중에 더 큰 항의 타입으로 결과 반환
            - 단) int 이하는 무조건 int 반환

    2. 강제(명시적)타입변환
        (1) double -> float -> long -> int -> short/char -> byte
        (2) 메모리 크기가 큰 것에서 작은 것으로 변환 가능!
        (3) (변환할타입명)변수명;
        (4) *자료의 손실이 생길 수 있음*


[ 입력함수 ]
    1. 콘솔화면에서 키보드로부터 입력받는 방법
    2. 사용법
        (1) 입력객체 생성 : new Scanner( System.in );
            Scanner 변수명 = new Scanner( System.in );
            * 주의할 점 : Scanner 입력시 자동완성 권장, 안할경우 : 클래스 위에 import java.util.Scanner; 직접 입력
            * import란 다른 클래스 (코드정보) 호출
        (2) 입력함수
            .next()             :입력받은 자료럴 문자열(String)로 반환, 띄어쓰기 불가능
            .nextLine()         :입력받은 자료럴 문자열(String)로 반환, 띄어쓰기 가능,
                                문제점 : 앞에 다른 next()가 존재할 경우 의미없는 nextLine이 필요
            .nextByte()         :입력받은 자료를 정수(byte)로 반환
            .nextShort()        :입력받은 자료를 정수(short)로 반환
            .nextInt()          :입력받은 자료를 정수(int)로 반환
            .nextLong()         :입력받은 자료를 정수(long)로 반환
            .nextFloat()        :입력받은 자료를 실수(float)로 반환
            .nextDouble()       :입력받은 자료를 실수(double)로 반환
            .nextBoolean()      :입력받은 자료를 논리(boolean)로 반환
            .next.charAt(0)     :입력받은 자료를 첫글자 문자(char) 1개 반환



[ 연산자 ]
    1. 산술연산자 : +더하기, -빼기, *곱하기, /나누기, %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과, >=이상, <미만, <=이하, ==같다, !=같지않다
    4. 논리연산자 : &&이면서 ||이거나 !부정
    5. 증감연산자 : ++변수명, 변수명++, --변수명, 변수명--
    6. 복합대입연산자 : =대입, +=더한후대입, *=곱한후대입, -=뺀후대입, /=나눈후대입, %나머지구한후대입
    7. 삼항연산자 : 조건? 참 : 거짓
    8. 문자열비교 : "문자열A".equals("문자열B")











