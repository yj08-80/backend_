[ 자바 클래스 파일 생성 ]
    1. [src]폴더 오른쪽 클릭
    2. [새로만들기] -> [패키지] -> ( 강의기준 day01~)
    3. [특정폴더] 오른쪽 클릭 -> [새로만들기] -> {java클래스]
    * 클래스 파일 명은 첫글자를 무조건 대문자 시작

[ 자바 구동 원리 ]
    1.개발자는 .java 파일 내 자바 문법 작성
    -Example.java(파일)
    2.[실행].java 파일 -- 컴파일(번역/해석) --> .class 파일 생성
    3.[처리] (컴퓨터가) class 자동 생성

    (자바 언어/ .java)

[ 주석 ]
    // 한 줄 주석
    /**/ 여러 줄 주석

[ 자바 활용처 ]
    1. 소프트웨어 : javafx툴 활용, 등등
    2. 웹 : JSP, Spring emdemd
    3. 앱 : 안드로이드 등등


[ 자바 코드 실행 ]
    자바는 클래스 단위로 컴파일 되고, 컴파일된 코드는 main 함수부터 자동 실행된다.

[ 리터럴 ]
    - 3, 3.14 , 'a' , "ABC" , true
    1. 정의 : 키보드로부터 입력한 자료
    2. 종류
        정수(int) , 실수(double) , 문자('') , 문자열("") , 논리(boolean)

[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리
    3. 종류( 8가지 )
        (1) 정수
        - byte : 1바이트 , -128 ~ +127
        - short : 2바이트 , +-3만 정도까지
        - int : 4바이트 ,  +- 21억 정도까지(*리터럴정수)
        - long : 8바이트 , +- 21억 정도 이상, 리터럴정수 뒤에 L/l 붙이기

        (2) 실수
        - float : 4바이트 , 소수점 8자리까지 표현, 리터럴실수 뒤에 F/f 붙이기
        - double : 8바이트 , 소수점 17자리까지 표현(*리터럴실수)

        (3) 논리
        - boolean : 1바이트 , true and false

        (4) 문자
        - char : 2바이트 , 유니코드,''작은따옴표 감싼 문자 1개

        (5) 문자열
        - String : 클래스 기반, ""큰따옴표 감싼 문자 여러 개


[ 출력함수 ]
    1.System.out.print();       출력
    2.System.out.printIn();     출력 후 줄바꿈
    3.System.out.printf( "형식문자1 형식문자2" , 값1 , 값2 );     서식(형식) 맞춤 출력
        - 형식문자 : %s문자열 , %d정수 , %c문자 . %f실수
        - 자릿수 :  %자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 공백, 오른쪽 정렬
                  %-자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 공백, 왼쪽 정렬
                  %0자릿수d : 자릿수만큼 자릿수 차지, 만일 비어있으면 0 채움
        - 소수점 자릿수 : %전체자릿수.소수점자릿수f : (소수점포함) 전체 자릿수만틈 자릿수 차지

[ 이스케이프/제어 문자] : 특수 문자에 기능이 포함
    \n 줄바꿈 \t 들여쓰기 \\ 백슬래시 출력 \' 작은따옴표 출력 \" 큰따옴표 출력


[ (변수)타입변환 ] , **다형성** API ( interface)
    1. 자료(묵시적)타입변환
        (1) byte -> short/char -> int -> long -> float -> double
        (2) 메모리 크기가 작은 것에서 큰 것으로 변환 가능!
        (3) 연산결과
            - 두 항 중에 더 큰 항의 타입으로 결과 반환
            - 단) int 이하는 무조건 int 반환

    2. 강제(명시적)타입변환
        (1) double -> float -> long -> int -> short/char -> byte
        (2) 메모리 크기가 큰 것에서 작은 것으로 변환 가능!
        (3) (변환할타입명)변수명;
        (4) *자료의 손실이 생길 수 있음*


[ 입력함수 ]
    1. 콘솔화면에서 키보드로부터 입력받는 방법
    2. 사용법
        (1) 입력객체 생성 : new Scanner( System.in );
            Scanner 변수명 = new Scanner( System.in );
            * 주의할 점 : Scanner 입력시 자동완성 권장, 안할경우 : 클래스 위에 import java.util.Scanner; 직접 입력
            * import란 다른 클래스 (코드정보) 호출
        (2) 입력함수
            .next()             :입력받은 자료럴 문자열(String)로 반환, 띄어쓰기 불가능
            .nextLine()         :입력받은 자료럴 문자열(String)로 반환, 띄어쓰기 가능,
                                문제점 : 앞에 다른 next()가 존재할 경우 의미없는 nextLine이 필요
            .nextByte()         :입력받은 자료를 정수(byte)로 반환
            .nextShort()        :입력받은 자료를 정수(short)로 반환
            .nextInt()          :입력받은 자료를 정수(int)로 반환
            .nextLong()         :입력받은 자료를 정수(long)로 반환
            .nextFloat()        :입력받은 자료를 실수(float)로 반환
            .nextDouble()       :입력받은 자료를 실수(double)로 반환
            .nextBoolean()      :입력받은 자료를 논리(boolean)로 반환
            .next.charAt(0)     :입력받은 자료를 첫글자 문자(char) 1개 반환



[ 연산자 ]
    1. 산술연산자 : +더하기, -빼기, *곱하기, /나누기, %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과, >=이상, <미만, <=이하, ==같다, !=같지않다
    4. 논리연산자 : &&이면서 ||이거나 !부정
    5. 증감연산자 : ++변수명, 변수명++, --변수명, 변수명--
    6. 복합대입연산자 : =대입, +=더한후대입, *=곱한후대입, -=뺀후대입, /=나눈후대입, %나머지구한후대입
    7. 삼항연산자 : 조건? 참 : 거짓
    8. 문자열비교 : "문자열A".equals("문자열B")

[ 조건문 ]
    1. 조건에 따른 결과(true/false)의 코드 흐름 제어
    * 지갑의 돈이 3000원 이상이면 택시탄다. 아니면 걸어간다.
    - 지갑의 돈 >= 30000 -> true 혹은 false
    - 삼항연산자 1) 지갑의 돈 >= 3000 ? "택시탄다" : "걸어간다"
    - 조건문    2) if( 지갑의 돈 >= 3000 ){"택시탄다"}else{"걸어간다"}

    2.종류
        (1) if( 조건문 ) 참일때코드;
        (2) if( 조건문 ){
           참일때명령어1;
           참일때명령어2;
           }
        (3) if( 조건문 ){ 참일때명령어; };
            else{ 거짓일때명령어; }
        (4) if( 조건문1 ){ 참1일때명령어 }
            else if( 조건문2 ){ 참2일때명령어 }
            else if ( 조건문3 ){ 참3일때명령어 }
            else{ 거짓일때명령여 }
        (5) if( 조건문1 ){ 참1일때명령어 };
            if( 조건문2 ){ 참2일때명령어 };
            if( 조건문3 ){ 참3일때명령어 };

    3.주의할 점
        (1) 조건문 자리에는 true/false만 가능
        (2) {} 중괄호 관리
        (3) if() : if소괄호 뒤에 ;세미콜론
        (4) if, if~else, if~else if 하나의 결과



[ 배열 ]
    1. 정의 : *동일한* 자료형(타입)의 여러개 자료들을 순서대로 저장하는 자료의 타입
    2. 특징
        1) 동일한 타입 : 서로 다른 자료형(타입) 데이터는 같은 배열에 저장 불가
        2) 고정 길이 : 배열은 한 번 선언(생성)되면 길이/크기/요소 개수 수정할 수 없다. <요소 추가/삭제 없다>
        3) 요소 기본값 : 배열 내 요소의 초기값이 없으면 자동으로 기본값
            - 정수 : 0  실수 : 0.0 논리 : false 객체(String) : null
        4) 인덱스 : 배열 내 저장된 요소들의 순서번호, 0번부터 시작

    3. 사용법
        1) 선언/생성
            (1) new 타입[길이];  , int[] 변수명 = new int[3];
            (2) {값1,값2,값3}   ,  double[] 변수명 = {3.14, 5.3, 78,62}

        2) 호출
            (1) 변수명  : 배열의 주소값 반환
            (2) Arrays.toString( 변수명 );  : 배열 내 요소 값들을 문자열로 반환
            (3) 변수명[인덱스]   : 배열 내 특정한 요소 값 반환
            (4) 변수명.length   :  배열 내 요소 개수 반환

        3) 요소 추가/삭제 없음
        4) 배열과 반복문
            (1) 일반 for문
                for( int i = 0 ; i <= 배열변수명.length-1 ; i++ ){
                    타입 반복변수명 = 배열변수명[index]
                }

            (2) 향상된 for문 : 인덱스 없이 배열내 요소값들을 하나씩 순회
                for(타입 반복변수명 : 배열변수명){}

[ 클래스와 객체 ] *자바는 컴파일(번역)을 클래스 단위로 처리한다.
    1) 정의
       (1) 객체  : '주체'가 아닌 의사나 행위를 미치는 대상
       (2) 클래스 : 객체를 만들기 위한 객체 정의하는 *설계도*

    2) 클래스 멤버
            (1) 멤버변수 : 객체내 포함할 변수, 속성/특징/성질 = 값/데이터
            (2) 메소드 : 객체내 포함할 함수, 이벤트/행위/작동 = 실행명령어집합
            (3) 생성자 : 객체가 생성될 때 초기화함수, 초기화 역할

    3) 클래스 사용법
        (1) 선언하는 방법 : 1..java파일내 여러개 클래스 존재 2..java파일내 클래스는 1개 존재(권장-유지보수)
            class 클래스명{
                멤버변수:
                생성자 :
                메소드 :
            }
    4) 객체 사용법
        (1) 객체 선언하는 방법
            new 클래스명();
            * new 연산자 : 클래스 기반으로 새로운 객체를 생성하며 메모리를 할당하는 키워드
        (2) 객체 내 멤버변수 호출
            변수명.멤버변수명
            * 접근 연산자 : 객체내 포함된 멤버변수, 메소드 등 접근하는 키워드
        (3) 객체 내 멤버변수 값 수정
            변수명.멤버변수명 = 새로운값
        (4) 객체 내 멤버변수 추가/삭제 불가능 : 클래스는 컴파일(실행/번역)된 이후에 수정이 불가능

[ 메소드 : 기능 사용법 ]
    1. 정의 : 하나의 기능을 수행하는 일련의 명령어들/코드들
        속성 vs 함수 : 속성은 '값' 저장하고 함수는 '코드'를 저장
    2. 용어
        1) 인수/인자값 : 메소드 호출 시 메소드에게 전달되는 값
            변수명.메소드명( 인수1 , 인수2 )
        2) 매개변수 : 메소드가 실행될 때 메소드 인수/인자값을 대입받는 변수
            void 메소드명( 타입 매개변수1, 타입 매개변수2 )
            - 주의할 점 : 1.인자값과 매개변수의 타입 일치 해야한다.
                        2.매개변수 없을 수도 있다
                        3.지역변수의 특징을 가진다
        3) 반환값 : 메소드가 종료될 때 메소드를 호출했던 곳으로 되돌려주는 값
            예) return 반환값;
        4) 반환 타입 : 반환 값의 자료형/타입
            예) 반환타입 메소드명( ){ }
            - 주의할 점 : 1. 반환값과 반환타입의 타입이 일치해야한다.
                        2. 반환값은 항상 자료 1개만 가능하다
                        3. 반환값이 없을 때는 void 타입의 키워드를 사용한다
    3. 사용법
        1) 정의/만들기
            반환타입 메소드명( 타입 매개변수1 , 타입 매개변수2 ){
                실행코드
                return 반환값;
            }
        2) 호출/사용하기
            방법1) 호출하고자 하는 메소드가 다른 클래스일때
                (1) 객체 생성: 클래스명 변수명 = new 클래스명();
                (2) 객체 통해 메소드 호출 : 변수명.메소드명( 인수1 , 인수2 )
            방법2) 호출하고자 하는 메소드가 같은 클래스일때
                (1) 메소드명( 인수1 , 인수2 )


[ 생성자 ]
    1. 정의 : 객체(인스턴스) 생성(new)할 때 사용되는 초기화 메소드
    2. 규칙
        1) 클래스명과 생성자명은 동일하다.
        2) 오버로드 : 매개변수의 개수/타입/순서가 다르면 동일한 이름으로 여러개 선언이 가능
    3. 사용법
        1) 기본생성자 : 매개변수 없는 생성자
            - 클래스 내 생성자가 하나도 존재하지 않으면 컴파일(실행)될 때 자동 생성
        2) 매개변수가 있는 생성자 : 주로 매개변수가 있는 생성자
            - 메소드와 다르게 반환값/반환타입 없다.
    4. 목적 : 객체 생성시 멤버변수에 빠른 초기화 혹은 유효성 검사 ( 규칙적인 초기화 )
    5. 사용법
        1) 선언/정의 방법
            class 클래스명{
                생성자명(){ }
            }
        2) 호출/사용 방법
            클래스명 변수명 = new 생성자명();

[ 주요 키워드 ]
    1. 접근제한자 : 다른 클래스가 특정한 클래스에 접근할 때 제한
        1) public : *모든 클래스*에서 접근 가능
        2) private : *현재 클래스*에서만 접근 가능
        3) (default) : 생략, *같은 패키지*에서만 접근 가능
        4) protected : *같은 패키지*에서만 접근 가능 , 상속관계 예외

    2. 클래스 불러오기
        import : 현재 클래스에서 다른 패키지의 클래스를 불러오기 / 라이브러리( 남이 만든 클래스 )
    3. 상수
        1) final : 초기화(선언) 이후에 수정 불가능 상태, 호출은 가능
        2) static : (전역변수 느낌) 프로그램 실행시 *우선 메모리 할당* 되고 프로그램 종료될 때 메모리 삭제 ( 객체 필요 없음 )

[ 관례적 용어 ]
    1. setter and getter : 멤버변수가 private으로 선언된 경우 다른 클래스로부터 간접접근 메소드
    2. public static final : (상수 느낌) 프로그램 내 딱 1개만 존재하는 값 선언할 때, 대문자로 구성

[ 구분할 용어들 ]
    1. 변수는 선언된 위치 또는 키워드에 따라 다르다.
        지역변수 : 매소드 안에서 선언된 변수
                class 클래스{ void 메소드(){ int a; } }
        멤버변수 : 객체 속성, 클래스내에 있으면서 메소드밖에서 선언된 변수
                class { int a; }
        매개변수 : 메소드 호출 시 전달받은 인수/인자값 저장한 변수
                class 클래스{ void 메소드( int a; ){} }
        정적변수 : 멤버변수 앞에 static
                { static int a; }


    2.
        클래스 : 객체를 생성하기 위한 설계도 ( 실체물 x )
        객체 : 속성과 기능을 구성하는 형태 ( 논리적 개념 )
        인스턴스 : 속성과 기능이 생성된 형태 ( 물리적 개념 )


























