package 종합.종합과제2;

import java.util.Scanner;

public class 과제2 { // class start

    public static void main(String[] args) {


        Waiting[] waitings = new Waiting[100];
        // 무한루프 활용하여 반복 계속 출력
        for( ; ; ){
            System.out.println( "=========== 맛집 대기 시스템 ===========" );
            System.out.println( "  1.대기 등록 | 2.대기 현황" );
            System.out.println( "====================================" );
            System.out.print( "선택 >" );
            Scanner scan = new Scanner( System.in );
            int choose = scan.nextInt();
            // if문으로 1번 2번 경우 나누기
            if( choose == 1 ){
                System.out.print( "전화번호 : " );
                String phone = scan.next();
                System.out.print( "인원수 : ");
                int count = scan.nextInt();
                // waiting 객체
                Waiting wait = new Waiting();
                wait.phone = phone; // 입력받은 값 대입하기
                wait.count = count;
                // check로 저장 성공 여부
                boolean check = false;
                for( int i = 0 ; i <= waitings.length-1 ; i++ ){
                    if( waitings[i] == null ){
                        waitings[i] = wait;
                        check = true;
                        break; // break 안쓰면 계속해서 첫번째 입력 출력
                    } // if end
                } // for end
                if ( check ){
                    System.out.println( "안내] 대기 등록이 완료되었습니다." );
                }else{
                    System.out.println( "[경고] 더 이상 대기 등록을 할 수 없습니다." );
                }
            }else if( choose == 2 ){
                System.out.println( "============= 대기 현황 =============" );
                for( int i = 0 ; i <= waitings.length-1 ; i++ ) {
                    Waiting wait = waitings[i];
                    if (wait != null) {
                        System.out.println( (i+1) + ". 연락처:" + wait.phone + "- 인원: " + wait.count + "명");
                    } // if end
                } // for end
            }
        } // main end
    } // class end
    /*

[ 제출방법 ] 코드가 작성된 파일이 위치한 깃허브 상세 주소를 제출하시오.

[JAVA] 종합과제2 : 식당 대기번호 프로그램 ( 배열과 객체 활용 )
[ 참고 ] 종합예제3 참고 하시오.
[ 목표 ] 종합과제1 에서 배열과 객체 문법 추가하여 , 최대 100개의 대기 명단을 관리할 수 있는 간단한 식당 대기번호 발행 프로그램을 구현합니다.
[ 요구사항 ]
    1. 대기 명단 저장 공간 만들기
        · 최대 100팀의 대기 명단을 저장할 수 있어야 합니다.
        · 각 대기 팀은 '전화번호'와 '인원수' 속성 를 가지는 Waiting 클래스 선언하시오.
        · 총 1개의 Waiting[] 배열변수를 선언하여 저장 공간을 만드세요. (예: Waiting[] waitings = new Waiting[100] )
        · String 변수는 null로, int 변수는 0으로 초기화하여 해당 공간이 비어있음을 나타내도록 합니다.
    2. 메인 프로그램 흐름 구현하기
        · 프로그램은 24시간 운영을 가정하여 for(;;) 무한루프를 사용합니다.
        · 무한루프 안에서 사용자에게 메뉴를 보여주고, Scanner를 통해 원하는 기능의 번호를 입력받으세요.
        · 기능 1: 대기 등록 (입력값: 1)
            - 사용자가 1을 입력하면, "전화번호 : "와 "인원수 : "를 순서대로 물어보고 입력받습니다.
            - Waiting 객체로 생성하여 입력받은 '내용' 과 '작성자'를 각 멤버변수에 대입 합니다.
            - 가장 먼저 발견된 빈 공간에 입력받은 전화번호와 인원수를 저장하고 "[안내] 대기 등록이 완료되었습니다." 메시지를 출력합니다.
            - 대기 공간이 모두 차 있다면, "[경고] 더 이상 대기 등록을 할 수 없습니다." 라는 메시지를 출력합니다.
        · 기능 2: 대기 현황 보기 (입력값: 2)
            - 사용자가 2를 입력하면, 현재 등록된 모든 대기 명단을 아래 형식으로 출력합니다.
            - 저장 공간이 비어있지 않은(null이 아닌) 경우에만 출력합니다.
[ 실행 예시 ]
=========== 맛집 대기 시스템 ===========
  1.대기 등록 | 2.대기 현황
========================================
선택 > 1
전화번호 : 010-1234-5678
인원수 : 2
[안내] 대기 등록이 완료되었습니다.

=========== 맛집 대기 시스템 ===========
  1.대기 등록 | 2.대기 현황
========================================
선택 > 1
전화번호 : 010-8765-4321
인원수 : 4
[안내] 대기 등록이 완료되었습니다.

=========== 맛집 대기 시스템 ===========
  1.대기 등록 | 2.대기 현황
========================================
선택 > 2
============= 대기 현황 =============
1. 연락처: 010-1234-5678 - 인원: 2명
------------------------------------
2. 연락처: 010-8765-4321 - 인원: 4명
------------------------------------

=========== 맛집 대기 시스템 ===========
  1.대기 등록 | 2.대기 현황
========================================
선택 > 1
전화번호 : 010-0000-0000
인원수 : 3
[경고] 더 이상 대기 등록을 할 수 없습니다.

     */
} // class end
