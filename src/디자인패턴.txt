[ 디자인 패턴 ]
    1. 패턴 : 되풀이되는 것
    2. 디자인 패턴 : 소프트웨어 설계 과정에서 자주 발생하는 문제점/설계 유형
    3. 종류
        1) 싱글톤 패턴
        2) MVC 패턴
    4. 목적 : 여러 개발자들이 협업간의 관례적인 규칙(패턴)으로 개발의 효율성 높인다.

[ 싱글톤 ]
    1. 정의 : 프로그램 내 객체(인스턴스)가 단 하나만 존재하는 설게
    2. 목적 : 하나의 객체(인스턴스)를 만들고 공유
        - 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
        - 협업에 있어서 굳이 여러개 개계9(인스턴스)가 필요 없는 경우가 있다.
    3. 싱글톤 만드는 방법
        단계1) 지정한 클래스에 기본 생성자를 private한다.
              private 생성자명(){}
        단계2) 지정한 클래스에 private static final 로 객체(인스턴스) 선언한다.
              private static final 클래스명 변수명 = new 생성자명();
        단계3) 지정한 클래스에 public static으로 getInstance 메소드 선언한다.
              public static 메소드명 getInstance(){
                    return 변수명;
              }
    4. 다른 클래스에서 싱글톤 호출하기
        클래스명.getInstance();


[ MVC 패턴 ]
    1. 정의 : (주로 웹/앱 개발) 소프트웨어 개발에서 사용되는 디자인패턴으로 세가지 주요 역할을 분리하여 코드의 모듈화(조각)와 유지보수 높인다.
    2. 목적 : 프로젝트 협업간의 코드와 파일들을 MVC 패턴에 따라 구성하여 효율성을 높인다.
    3. 장점 : 유지보수, 모듈화, 단일기능책임 등
    4. 단점 : 분리함에 따라 관리 복잡도 높다.
    5. 사용처 : 다양한 실무 프레임워크(Spring)에서 권장하는 패턴이다.
    6. 레이어/계층
        V : viewer, 입출력 담당
            - 주로 웹/앱에서는 HTML/CSS/JS/JSP/REACT/플러터(프론트엔드)
            - 사용자로부터 입력과 출력을 받는다.
            - 관례적인 규칙( console 기준 ) view 클래스에서만 print함수와 scan함수를 사용한다.
        C : controller, model과 view 사이의 제어/전달/유효성검사 담당
            - 주로 웹/앱에서는 JAVA/PYTHON/NODE.JS(백엔드)
            - 사용자로부터(view) 요청을 받아 model에게 전달하고 처리 결과를 view에게 전달한다.
            - 주요 키워드
                MVC1패턴 : JSP( controller+view ) , 머스테치 , 타임리프
                MVC2패턴 : controller , view 분리
                MVC2패턴 3티어( Spring ) : controller , service , view
        M : model, 데이터 관리 담당
            - 주로 웹/앱에서는 JAVA/PYTHON/NODE.JS (백엔드) 이면서 외부 데이터베이스 서버와 통신
            - 데이터 베이스 상호작용
            - 주요 키워드
                DAD( data access object ) : 데이터에 접근 객체  예)물류센터
                DTO( data transfer object ) : 데이터를 이동 객체 :  예)택배기사
            - 관례적인 규칙
                DTO 에는 데이터모델이므로 싱글톤을 사용하지 않는다.
    6. 레이어/계층 간의 흐름
        [주문]
        주문 요청 : 콜라 하나 주세요.
        사용자(view) -----> DTO -----> controller -----> DTO -----> model(DAD)
        주문 응답 : 콜라 하나 줄게요.
        view -----> DTO -----> controller -----> DTO -----> model(DAO)


    8. 파일/폴더 MVC 기준 구분
        - 프로젝트 폴더
            - controller 폴더
                MemberController
                BoardController
            - model 폴더
                -> dao 폴더
                    MemberDto
                    BoardDto
            - view 폴더 + 추후에 HTML로 변경된다
                MemberView
                BoardView
            - AppStart 클래스













