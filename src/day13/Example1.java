package day13;

public class Example1 { // class start
    public static void main(String[] args) { // main start
        /*

        클래스 멤버 : 1.멤버변수 2.메소드 3.생성자

        [ 상속 ]
            1. 정의 : (상위)클래스로부터 (하위)클래스에게 (멤버) 물려주는 행위
            2. 목적 : 빠른개발, 한 번 만들어둔 클래스를 재사용/활용한다.
            3. 키워드 : extends( 확장,연장 )
            4. 장점 : 1.유지보수 2.계층표현 3.재사용 4.**다형성**
            5. 사용법 : class 하위클래스명 extends 상의클래스명{}
            6. 주의할점 : 1) 상위클래스는 1개만 존재할 수 있다
                        2) 현실과 다르게( 부모 -> 자식) 하위가 상위를 선택( 자식 -> 부모 )

            7. 다형성 : 다양한 형식/타입을 갖는 성질
                1) 자동(묵시적) 타입변환
                    (1) 기본타입(8가지)
                        byte -> short -> int -> long -> float -> double
                    (2) 참조타입
                        하위 클래스(타입)에서 상위 클래스(타입)으로 변환
                        즉) extends 관계일때만 가능하다.
                2) 강제(명시적) 타입변환
                    (1) 기본타입(8가지)
                        double -> float -> long -> int -> short -> byte
                        (반환할타입)값
                    (2) 참조타입
                         상위 클래스(타입)에서 하위 클래스(타입)으로 변환
                         기능 조건 ) 객체(값)의 최초 타입에 따라 다르다

                *** 컴퓨터가 이해하는 다형성이란? ***
                    (닭)객체 생성되면 [눈에 안보임] 조류 객체 ---> 동물 객체 생성
                    1. 닭 객체 생성시 총 3개(닭/조류/동물)의 객체 생성
                    2. 조류 객체 생성시 총 2개(조류/동물)의 객체 생성
                    3. 참새 객체 생성시 총 3개(닭/조류/동물)의 객체 생성
                        즉1) 참새는 절대 닭이 될 수 없다 : 객체 없으니까
                        즉2) 참새는 동물-->조류-->참새 : 왔다갔다 반환되는 기능, 객체가 있으니까


         */

        동물 animal = new 동물(); // [1] 동물 클래스로 객체 1개
        animal.name = "강아지";
        animal.show(); // 강아지

        // [2] 조류 클래스로 객체 1개
        조류 bird = new 조류();
        // --> extends란? 상위클래스로부터 멤버변수/메소드 하위클래스가 사용
        bird.name = "비둘기"; // 조류 클래스에 존재하지 않는 멤버변수
        bird.show(); // 조류 클래스에 존재하지 않는 메소드

        // [3] 참새 클래스로 객체 1개
        참새 sparrow = new 참새();
        // --> 상위클래스의 상위클래스로부터 멤버변수/메소드  참새의 부모 --> 조류 --> 동물
        sparrow.name = "참새";
        sparrow.show();

        // [4] 닭 클래스로 객체 1개, 닭의 부모 --> 조류 --> 동물
        닭 chicken = new 닭();
        chicken.name = "닭";
        chicken.show(); // 닭

        // [5] 다형성
        // (1) 참새(객체)의 형식/타입/클래스가 조류로 변경
        조류 bird2 = sparrow;
        // int a = 3; long b = a;
        // (2) 참새(객체)의 클래스를 동물로 변경
        조류 animal2 = sparrow;
        // byte a = 3; long b = a;
        // (3) 동물(객체)의 클래스를 참새로 변경
        // 오류 이유 : 부모는 자식을 모른다
        // --> 자식이 부모를 선택했기 때문
        // 오류 : 참새 sparrow2 = animal;
        // 오류 : 조류 bird3 = animal;
        // (4) 단 ) 상위타입에서 하위타입으로 변경 조건
            // --> 객체(값) 태색(최초) 타입
        // (4-1) 닭 태어난 객체는 닭 -> 동물-> 닭
        닭 obj1 = new 닭(); // 태생이 닭인 객체는
        동물 obj2 = obj1; // 상위클래스 변환 : 자동 타입변환
        닭 obj3 = (닭)obj2; // 하위클래스로 변환 : 강제 타입변환

        //(5) 형제들간의 타입변환 절대 불가능
        // 참새 obj44 = (참새)obj3;

    } // main end
} // class end

// (1) 동물 클래스
class 동물{ // 동물 class start
    // 멤버변수
    String name;
    // 메소드
    void show(){
        System.out.println( "이름 : " + name );
    }
} // 동물 class end

// (2) 조류 클래스 : 동물 클래스로부터 상속 받기
class 조류 extends 동물{}

// (3) 참새 클래스 : **조류** 클래스로부터 상속 받기
class 참새 extends 조류{}

// (3) 닭 클래스 : **조류** 클래스로부터 상속 받기
class 닭 extends 조류{}















