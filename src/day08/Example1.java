package day08;

public class Example1 { // class start
    public static void main(String[] args) { // main start
    /*

    [ 생성자 ]
        1. 정의 : 객체를 (new) 생성할 때 사용되는 함수
            * 초기화 : 초기에 값 대입, 처음에 로직처리하는 것
        2. 규칙
            1. 클래스명과 *무조건* 동일한 이름을 갖는다.
                클래스명 변수명 = new 생성자명();
                * 만일 클래스명과 이름이 다르면 *메소드* 취급 당한다.
            2. 오버로드 : 메소드/생성자는 매개변수의 개수/타입/순서 (변수명 제외) 가 다르면 동일한 이름으로 여러개 선언이 가능
                    * 변수명/식별자는 동일한 이름을 가질 수 없다.
                    즉) 메소드/생성자는 동일한 이름으로 여러개 만들 수 없다.
                    왜? 내부적인 사유 : 객체의 멤버변수는 객체마다, 객체의 메소드는 공유
               오버라이딩

        3. 종류
            1) 기본생성자
                정의 : 생성자명(){ }
                사용 : new 생성자명();

     */
        //[1] 기본 생성자를 이용한 객체 생성
            // 클래스명 변수명 = new 생성자명();
        Phone p1 = new Phone();

        //[2] 매개변수를 갖는 생성자를 이용한 객체 생성
        Phone p2 = new Phone( "갤럭시s25" , "실버" );

        // 생성자 목적
        // 1.객체 생성시 빠른 멤버변수 초기화
        // 2.협업에 있어서 규칙적인 값 초기화
        // 단점 : 규칙에 따른 복잡도 증가, 자유도 감소

        //[3]
        Phone p3 = new Phone( "아이폰15" , "화이트" , 1500000 );

        //[4] 생성자에서 정의되지 않은 매개변수와 불일치는 오류 발생
        //Phone p4 = new Phone( 1000000 , "화이트" , "아이폰15" );

    } // main end
} // class end









